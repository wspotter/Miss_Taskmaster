version: '3.8'

services:
  # MCP Server - Main API interface
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: miss_taskmaster_mcp_server
    ports:
      - "8000:8000"  # FastAPI/Uvicorn server
      # - "5000:5000" # Uncomment if enabling Flask web interface
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # Add OpenAI API key if using LLM features
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      # Persist logs, project state, and work logs
      - ./logs:/app/logs
      - ./work_logs:/app/work_logs
      - ./project_state:/app/project_state
      # Mount project plan templates
      - ./project_plan_template.json:/app/project_plan_template.json:ro
    networks:
      - miss-taskmaster-network
    depends_on:
      - redis  # For potential session management (if needed)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching/sessions (optional, comment out if not needed)
  redis:
    image: redis:7-alpine
    container_name: miss_taskmaster_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - miss-taskmaster-network
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for persistent data storage (if needed in future)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: miss_taskmaster_postgres
  #   environment:
  #     - POSTGRES_DB=miss_taskmaster
  #     - POSTGRES_USER=supermanus
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - miss-taskmaster-network
  #   restart: unless-stopped

  # Qdrant vector database for semantic search/retrieval
  qdrant:
    image: qdrant/qdrant:latest
    container_name: miss_taskmaster_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - miss-taskmaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Prometheus for metrics monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: miss_taskmaster_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - miss-taskmaster-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: miss_taskmaster_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - miss-taskmaster-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  qdrant_storage:
  # postgres_data:

networks:
  miss-taskmaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16